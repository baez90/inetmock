// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PCAPClient is the client API for PCAP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PCAPClient interface {
	ListAvailableDevices(ctx context.Context, in *ListAvailableDevicesRequest, opts ...grpc.CallOption) (*ListAvailableDevicesResponse, error)
	ListRecordings(ctx context.Context, in *ListRecordingsRequest, opts ...grpc.CallOption) (*ListRecordingsResponse, error)
	RegisterPCAPFileRecord(ctx context.Context, in *RegisterPCAPFileRecordRequest, opts ...grpc.CallOption) (*RegisterPCAPFileRecordResponse, error)
	RemovePCAPFileRecord(ctx context.Context, in *RemovePCAPFileRecordRequest, opts ...grpc.CallOption) (*RemovePCAPFileRecordResponse, error)
}

type pCAPClient struct {
	cc grpc.ClientConnInterface
}

func NewPCAPClient(cc grpc.ClientConnInterface) PCAPClient {
	return &pCAPClient{cc}
}

func (c *pCAPClient) ListAvailableDevices(ctx context.Context, in *ListAvailableDevicesRequest, opts ...grpc.CallOption) (*ListAvailableDevicesResponse, error) {
	out := new(ListAvailableDevicesResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.PCAP/ListAvailableDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCAPClient) ListRecordings(ctx context.Context, in *ListRecordingsRequest, opts ...grpc.CallOption) (*ListRecordingsResponse, error) {
	out := new(ListRecordingsResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.PCAP/ListRecordings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCAPClient) RegisterPCAPFileRecord(ctx context.Context, in *RegisterPCAPFileRecordRequest, opts ...grpc.CallOption) (*RegisterPCAPFileRecordResponse, error) {
	out := new(RegisterPCAPFileRecordResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.PCAP/RegisterPCAPFileRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCAPClient) RemovePCAPFileRecord(ctx context.Context, in *RemovePCAPFileRecordRequest, opts ...grpc.CallOption) (*RemovePCAPFileRecordResponse, error) {
	out := new(RemovePCAPFileRecordResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.PCAP/RemovePCAPFileRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PCAPServer is the server API for PCAP service.
// All implementations must embed UnimplementedPCAPServer
// for forward compatibility
type PCAPServer interface {
	ListAvailableDevices(context.Context, *ListAvailableDevicesRequest) (*ListAvailableDevicesResponse, error)
	ListRecordings(context.Context, *ListRecordingsRequest) (*ListRecordingsResponse, error)
	RegisterPCAPFileRecord(context.Context, *RegisterPCAPFileRecordRequest) (*RegisterPCAPFileRecordResponse, error)
	RemovePCAPFileRecord(context.Context, *RemovePCAPFileRecordRequest) (*RemovePCAPFileRecordResponse, error)
	mustEmbedUnimplementedPCAPServer()
}

// UnimplementedPCAPServer must be embedded to have forward compatible implementations.
type UnimplementedPCAPServer struct {
}

func (UnimplementedPCAPServer) ListAvailableDevices(context.Context, *ListAvailableDevicesRequest) (*ListAvailableDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableDevices not implemented")
}
func (UnimplementedPCAPServer) ListRecordings(context.Context, *ListRecordingsRequest) (*ListRecordingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecordings not implemented")
}
func (UnimplementedPCAPServer) RegisterPCAPFileRecord(context.Context, *RegisterPCAPFileRecordRequest) (*RegisterPCAPFileRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPCAPFileRecord not implemented")
}
func (UnimplementedPCAPServer) RemovePCAPFileRecord(context.Context, *RemovePCAPFileRecordRequest) (*RemovePCAPFileRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePCAPFileRecord not implemented")
}
func (UnimplementedPCAPServer) mustEmbedUnimplementedPCAPServer() {}

// UnsafePCAPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PCAPServer will
// result in compilation errors.
type UnsafePCAPServer interface {
	mustEmbedUnimplementedPCAPServer()
}

func RegisterPCAPServer(s grpc.ServiceRegistrar, srv PCAPServer) {
	s.RegisterService(&_PCAP_serviceDesc, srv)
}

func _PCAP_ListAvailableDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCAPServer).ListAvailableDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.PCAP/ListAvailableDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCAPServer).ListAvailableDevices(ctx, req.(*ListAvailableDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCAP_ListRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCAPServer).ListRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.PCAP/ListRecordings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCAPServer).ListRecordings(ctx, req.(*ListRecordingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCAP_RegisterPCAPFileRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPCAPFileRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCAPServer).RegisterPCAPFileRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.PCAP/RegisterPCAPFileRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCAPServer).RegisterPCAPFileRecord(ctx, req.(*RegisterPCAPFileRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCAP_RemovePCAPFileRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePCAPFileRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCAPServer).RemovePCAPFileRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.PCAP/RemovePCAPFileRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCAPServer).RemovePCAPFileRecord(ctx, req.(*RemovePCAPFileRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PCAP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inetmock.rpc.PCAP",
	HandlerType: (*PCAPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAvailableDevices",
			Handler:    _PCAP_ListAvailableDevices_Handler,
		},
		{
			MethodName: "ListRecordings",
			Handler:    _PCAP_ListRecordings_Handler,
		},
		{
			MethodName: "RegisterPCAPFileRecord",
			Handler:    _PCAP_RegisterPCAPFileRecord_Handler,
		},
		{
			MethodName: "RemovePCAPFileRecord",
			Handler:    _PCAP_RemovePCAPFileRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pcap.proto",
}
