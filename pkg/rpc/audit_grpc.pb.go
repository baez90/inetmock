// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	audit "gitlab.com/inetmock/inetmock/pkg/audit"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuditClient is the client API for Audit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditClient interface {
	WatchEvents(ctx context.Context, in *WatchEventsRequest, opts ...grpc.CallOption) (Audit_WatchEventsClient, error)
	RegisterFileSink(ctx context.Context, in *RegisterFileSinkRequest, opts ...grpc.CallOption) (*RegisterFileSinkResponse, error)
	RemoveFileSink(ctx context.Context, in *RemoveFileSinkRequest, opts ...grpc.CallOption) (*RemoveFileSinkResponse, error)
	ListSinks(ctx context.Context, in *ListSinksRequest, opts ...grpc.CallOption) (*ListSinksResponse, error)
}

type auditClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditClient(cc grpc.ClientConnInterface) AuditClient {
	return &auditClient{cc}
}

func (c *auditClient) WatchEvents(ctx context.Context, in *WatchEventsRequest, opts ...grpc.CallOption) (Audit_WatchEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Audit_serviceDesc.Streams[0], "/inetmock.rpc.Audit/WatchEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &auditWatchEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Audit_WatchEventsClient interface {
	Recv() (*audit.EventEntity, error)
	grpc.ClientStream
}

type auditWatchEventsClient struct {
	grpc.ClientStream
}

func (x *auditWatchEventsClient) Recv() (*audit.EventEntity, error) {
	m := new(audit.EventEntity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auditClient) RegisterFileSink(ctx context.Context, in *RegisterFileSinkRequest, opts ...grpc.CallOption) (*RegisterFileSinkResponse, error) {
	out := new(RegisterFileSinkResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.Audit/RegisterFileSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditClient) RemoveFileSink(ctx context.Context, in *RemoveFileSinkRequest, opts ...grpc.CallOption) (*RemoveFileSinkResponse, error) {
	out := new(RemoveFileSinkResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.Audit/RemoveFileSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditClient) ListSinks(ctx context.Context, in *ListSinksRequest, opts ...grpc.CallOption) (*ListSinksResponse, error) {
	out := new(ListSinksResponse)
	err := c.cc.Invoke(ctx, "/inetmock.rpc.Audit/ListSinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServer is the server API for Audit service.
// All implementations must embed UnimplementedAuditServer
// for forward compatibility
type AuditServer interface {
	WatchEvents(*WatchEventsRequest, Audit_WatchEventsServer) error
	RegisterFileSink(context.Context, *RegisterFileSinkRequest) (*RegisterFileSinkResponse, error)
	RemoveFileSink(context.Context, *RemoveFileSinkRequest) (*RemoveFileSinkResponse, error)
	ListSinks(context.Context, *ListSinksRequest) (*ListSinksResponse, error)
	mustEmbedUnimplementedAuditServer()
}

// UnimplementedAuditServer must be embedded to have forward compatible implementations.
type UnimplementedAuditServer struct {
}

func (UnimplementedAuditServer) WatchEvents(*WatchEventsRequest, Audit_WatchEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchEvents not implemented")
}
func (UnimplementedAuditServer) RegisterFileSink(context.Context, *RegisterFileSinkRequest) (*RegisterFileSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFileSink not implemented")
}
func (UnimplementedAuditServer) RemoveFileSink(context.Context, *RemoveFileSinkRequest) (*RemoveFileSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFileSink not implemented")
}
func (UnimplementedAuditServer) ListSinks(context.Context, *ListSinksRequest) (*ListSinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSinks not implemented")
}
func (UnimplementedAuditServer) mustEmbedUnimplementedAuditServer() {}

// UnsafeAuditServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditServer will
// result in compilation errors.
type UnsafeAuditServer interface {
	mustEmbedUnimplementedAuditServer()
}

func RegisterAuditServer(s grpc.ServiceRegistrar, srv AuditServer) {
	s.RegisterService(&_Audit_serviceDesc, srv)
}

func _Audit_WatchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditServer).WatchEvents(m, &auditWatchEventsServer{stream})
}

type Audit_WatchEventsServer interface {
	Send(*audit.EventEntity) error
	grpc.ServerStream
}

type auditWatchEventsServer struct {
	grpc.ServerStream
}

func (x *auditWatchEventsServer) Send(m *audit.EventEntity) error {
	return x.ServerStream.SendMsg(m)
}

func _Audit_RegisterFileSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFileSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServer).RegisterFileSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.Audit/RegisterFileSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServer).RegisterFileSink(ctx, req.(*RegisterFileSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audit_RemoveFileSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServer).RemoveFileSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.Audit/RemoveFileSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServer).RemoveFileSink(ctx, req.(*RemoveFileSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audit_ListSinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServer).ListSinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inetmock.rpc.Audit/ListSinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServer).ListSinks(ctx, req.(*ListSinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Audit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inetmock.rpc.Audit",
	HandlerType: (*AuditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFileSink",
			Handler:    _Audit_RegisterFileSink_Handler,
		},
		{
			MethodName: "RemoveFileSink",
			Handler:    _Audit_RemoveFileSink_Handler,
		},
		{
			MethodName: "ListSinks",
			Handler:    _Audit_ListSinks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchEvents",
			Handler:       _Audit_WatchEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/audit.proto",
}
