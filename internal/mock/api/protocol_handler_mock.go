// Code generated by MockGen. DO NOT EDIT.
// Source: protocol_handler.go

// Package api_mock is a generated GoMock package.
package api_mock

import (
	api "github.com/baez90/inetmock/pkg/api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProtocolHandler is a mock of ProtocolHandler interface
type MockProtocolHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolHandlerMockRecorder
}

// MockProtocolHandlerMockRecorder is the mock recorder for MockProtocolHandler
type MockProtocolHandlerMockRecorder struct {
	mock *MockProtocolHandler
}

// NewMockProtocolHandler creates a new mock instance
func NewMockProtocolHandler(ctrl *gomock.Controller) *MockProtocolHandler {
	mock := &MockProtocolHandler{ctrl: ctrl}
	mock.recorder = &MockProtocolHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProtocolHandler) EXPECT() *MockProtocolHandlerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockProtocolHandler) Start(config api.HandlerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockProtocolHandlerMockRecorder) Start(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProtocolHandler)(nil).Start), config)
}

// Shutdown mocks base method
func (m *MockProtocolHandler) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockProtocolHandlerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockProtocolHandler)(nil).Shutdown))
}
