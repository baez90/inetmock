x-response-rules: &httpResponseRules
  rules:
    - pattern: ".*\\.(?i)exe"
      response: ./assets/fakeFiles/sample.exe
    - pattern: ".*\\.(?i)(jpg|jpeg)"
      response: ./assets/fakeFiles/default.jpg
    - pattern: ".*\\.(?i)png"
      response: ./assets/fakeFiles/default.png
    - pattern: ".*\\.(?i)gif"
      response: ./assets/fakeFiles/default.gif
    - pattern: ".*\\.(?i)ico"
      response: ./assets/fakeFiles/default.ico
    - pattern: ".*\\.(?i)txt"
      response: ./assets/fakeFiles/default.txt
    - pattern: ".*"
      response: ./assets/fakeFiles/default.html

api:
  listen: unix:///var/run/inetmock.sock

tls:
  ecdsaCurve: P256
  validity:
    ca:
      notBeforeRelative: 17520h
      notAfterRelative: 17520h
    server:
      NotBeforeRelative: 168h
      NotAfterRelative: 168h
  rootCaCert:
    publicKeyPath: ./ca.pem
    privateKeyPath: ./ca.key
  certCachePath: /tmp/inetmock/

endpoints:
  plainHttp:
    handler: http_mock
    listenAddress: 0.0.0.0
    ports:
    - 80
    - 8080
    options:
      <<: *httpResponseRules
  proxy:
    handler: http_proxy
    listenAddress: 0.0.0.0
    ports:
    - 3128
    options:
      target:
        ipAddress: 127.0.0.1
        port: 80
  httpsDowngrade:
    handler: tls_interceptor
    listenAddress: 0.0.0.0
    ports:
    - 443
    - 8443
    options:
      target:
        ipAddress: 127.0.0.1
        port: 80
  plainDns:
    handler: dns_mock
    listenAddress: 0.0.0.0
    ports:
    - 53
    options:
      rules:
        - pattern: ".*\\.google\\.com"
          response: 1.1.1.1
        - pattern: ".*\\.reddit\\.com"
          response: 2.2.2.2
      fallback:
        strategy: incremental
        args:
          startIP: 10.0.10.0
  dnsOverTlsDowngrade:
    handler: tls_interceptor
    listenAddress: 0.0.0.0
    ports:
    - 853
    options:
      target:
        ipAddress: 127.0.0.1
        port: 53