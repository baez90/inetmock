// Code generated by MockGen. DO NOT EDIT.
// Source: loading.go

// Package mock is a generated GoMock package.
package mock

import (
	api "github.com/baez90/inetmock/pkg/api"
	gomock "github.com/golang/mock/gomock"
	cobra "github.com/spf13/cobra"
	reflect "reflect"
)

// MockHandlerRegistry is a mock of HandlerRegistry interface
type MockHandlerRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerRegistryMockRecorder
}

// MockHandlerRegistryMockRecorder is the mock recorder for MockHandlerRegistry
type MockHandlerRegistryMockRecorder struct {
	mock *MockHandlerRegistry
}

// NewMockHandlerRegistry creates a new mock instance
func NewMockHandlerRegistry(ctrl *gomock.Controller) *MockHandlerRegistry {
	mock := &MockHandlerRegistry{ctrl: ctrl}
	mock.recorder = &MockHandlerRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandlerRegistry) EXPECT() *MockHandlerRegistryMockRecorder {
	return m.recorder
}

// LoadPlugins mocks base method
func (m *MockHandlerRegistry) LoadPlugins(pluginsPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPlugins", pluginsPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPlugins indicates an expected call of LoadPlugins
func (mr *MockHandlerRegistryMockRecorder) LoadPlugins(pluginsPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPlugins", reflect.TypeOf((*MockHandlerRegistry)(nil).LoadPlugins), pluginsPath)
}

// RegisterHandler mocks base method
func (m *MockHandlerRegistry) RegisterHandler(handlerName string, handlerProvider api.PluginInstanceFactory, subCommands ...*cobra.Command) {
	m.ctrl.T.Helper()
	varargs := []interface{}{handlerName, handlerProvider}
	for _, a := range subCommands {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterHandler", varargs...)
}

// RegisterHandler indicates an expected call of RegisterHandler
func (mr *MockHandlerRegistryMockRecorder) RegisterHandler(handlerName, handlerProvider interface{}, subCommands ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{handlerName, handlerProvider}, subCommands...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockHandlerRegistry)(nil).RegisterHandler), varargs...)
}

// HandlerForName mocks base method
func (m *MockHandlerRegistry) HandlerForName(handlerName string) (api.ProtocolHandler, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerForName", handlerName)
	ret0, _ := ret[0].(api.ProtocolHandler)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// HandlerForName indicates an expected call of HandlerForName
func (mr *MockHandlerRegistryMockRecorder) HandlerForName(handlerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerForName", reflect.TypeOf((*MockHandlerRegistry)(nil).HandlerForName), handlerName)
}

// PluginCommands mocks base method
func (m *MockHandlerRegistry) PluginCommands() []*cobra.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginCommands")
	ret0, _ := ret[0].([]*cobra.Command)
	return ret0
}

// PluginCommands indicates an expected call of PluginCommands
func (mr *MockHandlerRegistryMockRecorder) PluginCommands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginCommands", reflect.TypeOf((*MockHandlerRegistry)(nil).PluginCommands))
}
